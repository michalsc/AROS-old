# GNU Make automatic variables
# $@ current target
# $< First dependency
# $? All newer dependencies
# $^ All dependencies
# $* The stem (ie. target is dir/a.foo.b and the pattern is
#    a.%.b, then the stem is dir/foo)

#------------------------------------------------------------------------------
# Create one directory without any output
%define mkdir_q dir=.
	@$(IF) $(TEST) ! -d %(dir) ; then $(MKDIR) %(dir) ; else $(NOP) ; fi
%end

#------------------------------------------------------------------------------
# Create several directories without any output
%define mkdirs_q dirs=/M
	@$(FOR) dir in %(dirs) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done
%end

#------------------------------------------------------------------------------
# Same, more noisy
%define mkdirs dirs=/M
	@$(FOR) dir in %(dirs) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done
%end

#------------------------------------------------------------------------------
# Assemble the file %(from) to %(to) with %(cmd). Write any errors to %(err)
# and use the options in %(opt).
%define assemble_q cmd=$(AS) opt=$(AFLAGS) from=$< to=$@ path=$(CURDIR)/
	@$(ECHO) "Assembling %(path)%(from)..."
	@$(IF) %(cmd) %(opt) -c %(from) -o %(to) > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "%(path)%(from): %(cmd) %(opt) -c %(from) -o %(to)" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Assemble failed: %(cmd) %(opt) -c %(from) -o %(to)" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
%end

#------------------------------------------------------------------------------
# Compile the file %(from) to %(to) with %(cmd). Write any errors to %(err)
# and use the options in %(opt).
%define compile_q cmd=$(CC) opt=$(CFLAGS) from=$< to=$@ path=$(CURDIR)/
	@$(ECHO) "Compiling %(path)%(from)..."
	@$(IF) %(cmd) %(opt) -c %(from) -o %(to) > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "%(path)%(from): %(cmd) %(opt) -c %(from) -o %(to)" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Compile failed: %(cmd) %(opt) -c %(from) -o %(to)" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
%end

#------------------------------------------------------------------------------
%define link_q cmd=$(CC) opt=$(ILDFLAGS) startup=$(STARTUP) from=$< to=$@ libs=$(LIBS)
	@$(ECHO) "Linking %(to)..."
	@$(IF) %(cmd) %(opt) %(startup) %(from) -o %(to) %(libs) 2>&1 > $(GENDIR)/cerrors 2>&1 ; then \
	    $(IF) $(TEST) -s $(GENDIR)/cerrors ; then \
		$(ECHO) "%(to): %(cmd) %(opt) %(startup) %(from) -o %(to) %(libs)" >> $(GENDIR)/errors ; \
		$(CAT) $(GENDIR)/cerrors >> $(GENDIR)/errors ; \
	    else \
		$(NOP) ; \
	    fi ; \
	else \
	    $(ECHO) "Link failed: %(cmd) %(opt) %(startup) %(from) -o %(to) %(libs)" 1>&2 ; \
	    tee < $(GENDIR)/cerrors -a $(GENDIR)/errors 1>&2 ; \
	    exit 1 ; \
	fi
%checkuds to=%(to) linkcmd="%(cmd) %(opt) %(startup) %(from) -o %(to) %(libs)"
%end

#------------------------------------------------------------------------------
%define checkuds us=$(GENDIR)/undefdsyms.list err=$(GENDIR)/errors to=$@ linkcmd=""
	@$(ECHO) "Checking %(to)..."
	@$(CHECKUDS) %(to) > %(us)
	@$(IF) $(TEST) -s %(us); then \
	    $(ECHO) "%(linkcmd)" >> %(err) ; \
	    $(ECHO) "There are undefined symbols in %(to):" 1>&2 ; \
	    tee < %(us) -a %(err) 1>&2 ; \
	    exit 1 ; \
	else $(NOP) ; fi
%end

#------------------------------------------------------------------------------
# Create the library
%define mklib_q ar=$(AR) ranlib=$(RANLIB) to=$@ from=$(OBJS)
	@$(ECHO) "Creating library %(to)..."
	@%(ar) %(to) %(from)
	@%(ranlib) %(to)
%end

#------------------------------------------------------------------------------
%define mklib_arch ar=$(AR) ranlib=$(RANLIB) to=$@ from="$(OBJS)" cmd=$(CC) opt=$(CFLAGS) archive=$(ARCHIVE)
	@$(ECHO) "Creating library %(to)..."
	@%(ar) %(to) %(from)
	@%(ranlib) %(to)
	@$(RM) $(RMLIB)

$(OBJDIR)/functions.o : $(OBJDIR)/functions.c
%compile_q opt="$(CFLAGS) -I$(OBJDIR)"

$(OBJDIR)/functions.c : %(archive)
%mkdir_q $(OBJDIR)
	@$(ARCHTOOL) -s %(archive) $@

$(OBJDIR)/functions.d : $(OBJDIR)/functions.c
%mkdepend_q flags="$(CFLAGS) -I$(OBJDIR)"
%end

#------------------------------------------------------------------------------
%define mklib_f ar=$(AR) ranlib=$(RANLIB) to=$@ from="$(OBJS)" cmd=$(CC) opt=$(CFLAGS) functions=$(FUNCTIONS) deplibs="$(DEPLIBS)"
	@$(ECHO) "Creating library %(to)..."
	@%(ar) %(to) %(from)
	@%(ranlib) %(to)
	@$(RM) $(RMLIB)

$(OBJDIR)/functions.o : $(OBJDIR)/functions.c
%compile_q opt="$(CFLAGS) -I$(OBJDIR)" path=""

$(OBJDIR)/functions.c : $(foreach f,%(functions),$(f).c)
	@$(CPAK) %(functions)
%mkdir_q $(OBJDIR)
	@$(MV) functions.c functions.h $(OBJDIR)

$(OBJDIR)/functions.d : $(OBJDIR)/functions.c
%mkdepend_q flags="$(CFLAGS) -I$(OBJDIR)"
%end

#------------------------------------------------------------------------------
# Same but more noisy
%define mklib ar=$(AR) ranlib=$(RANLIB) to=$@ from=$(OBJS)
	@$(ECHO) "Creating library %(to)..."
	%(ar) %(to) %(from)
	%(ranlib) %(to)
%end

#------------------------------------------------------------------------------
# Create the dependency file %(to) for %(from) in the directory %(dir)
%define mkdepend_q flags=$(CFLAGS) from=$< to=$@ dir=$(@D) opt=
	@$(IF) [ ! -d %(dir) ]; then $(MKDIR) %(dir) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/%(from)..."
	@$(MKDEPEND) %(flags) %(from) -o %(to)
%end

#------------------------------------------------------------------------------
# Same but more noisy
%define mkdepend flags=$(CFLAGS) from=$< to=$@ dir=$(@D) opt=
	@$(IF) [ ! -d %(dir) ]; then $(MKDIR) %(dir) ; else $(NOP) ; fi
	@$(ECHO) "Makedepend $(CURDIR)/%(from)..."
	$(MKDEPEND) %(flags) %(from) -o %(to)
%end

#------------------------------------------------------------------------------
# Add section with all necessary libs and dependencies for linking
%define define_libs prelibs= postlibs= deplibs=
STARTUP = $(LIBDIR)/startup.o
LIBS = -L$(LIBDIR) %(prelibs) -larossupport -lamiga -larosc -larosm %(postlibs)
DEPLIBS = $(LIBDIR)/libamiga.a $(LIBDIR)/libarossupport.a $(STARTUP) \
	$(LIBDIR)/libarosc.a $(LIBDIR)/libarosm.a %(deplibs)
%end

#------------------------------------------------------------------------------
# Do something in all subdirs
# This macro uses a trick: %(target) is evaluated *after* %(text), so one
# can use %(target) in %(text).
%define subdirs_q text="Making %(target)" target=$(TARGET) dirs=$(SUBDIRS) curdir=$(CURDIR) mflags=$(MFLAGS) submf=makefile top=$(TOP)
	@$(FOR) dir in %(dirs) ; do \
	    $(ECHO) "%(text) in %(curdir)/$$dir..." ; \
	    if $(TEST) -f $$dir/%(submf).src && \
		{ $(TEST) ! -f $$dir/%(submf) \
		-o $$dir/%(submf).src -nt $$dir/%(submf) \
		-o %(top)/config/make.tmpl -nt $$dir/%(submf) ; } ; then \
		$(ECHO) "Generating %(submf)..." ; \
		$(AWK) -f $(TOP)/scripts/genmf.gawk \
		-v TOP="$(TOP)" \
		$$dir/%(submf).src > $$dir/%(submf) || exit 1 ; \
	    fi ; \
	    if ( cd $$dir ; \
		$(MAKE) %(mflags) --file=%(submf) \
		    TOP="%(top)/.." CURDIR="%(curdir)/$$dir" \
		    TARGET=%(target) %(target) ) ; \
	    then $(NOP) ; else exit 1 ; fi ; \
	done
%end

#------------------------------------------------------------------------------
# Prepare creation of a shared lib
%define prepare_shlib lib=dummy shflag=$(SHARED_DUMMY)
ifeq ("%(shflag)","yes")
LIB    := $(LIBDIR)/lib%(lib).so
RMLIB  := $(LIBDIR)/lib%(lib).a
AR     := $(SHARED_AR)
RANLIB := $(NOP)
else
LIB    := $(LIBDIR)/lib%(lib).a
RMLIB  := $(LIBDIR)/lib%(lib).so
endif
%end

#------------------------------------------------------------------------------
# Generate function table
%define mkfunctable_q lib=dummy from=$^ to=$@
	@$(ECHO) "Regenerating %(to)..."
	@$(AWK) -f $(TOP)/scripts/makefunctable.awk \
	    -v lib="%(lib)" %(from)
%end

#------------------------------------------------------------------------------
# Generate endskip variable
%define mkendtag_q lib=dummy to=$@
	@$(ECHO) "Regenerating %(to)..."
	@$(AWK) -f $(TOP)/scripts/makeendtag.awk \
	    -v lib="%(lib)"
%end

#------------------------------------------------------------------------------
# Common rules for all makefiles
%define common
# Delete generated makefiles
clean ::
	$(RM) mmakefile mmakefile.bak

%end

#------------------------------------------------------------------------------
# Include the dependency files and add some internal rules
%define include_deps deps=$(DEPS)/M nodepstargets=
# Include these files but only if the current target is neither
# setup nor clean.
ifeq (,$(filter clean% setup% includes% %(nodepstargets),$(TARGET)))
-include %(deps)
endif
%end

#------------------------------------------------------------------------------
# rule to generate libdefs.h with archtool (options may go away!)
%define libdefs_rule conffile=lib.conf genlibdefstool=$(ARCHTOOL) dest=libdefs.h
%(dest) : %(conffile) %(genlibdefstool)
	@$(ECHO) "Generating $@..."
	@%(genlibdefstool) -c
%end


#------------------------------------------------------------------------------
# rule to generate asm files from c files (for debugging purposes)
%define asm_rule opt=$(GENASM)
.PHONY : asm
asm : $(foreach f,%(opt),$(f).s) all
%end

#------------------------------------------------------------------------------
# generate asm files from c files (for debugging purposes)
%define ctoasm_q
%.s : %.c
	@$(ECHO) "Generating $(CURDIR)/$@..."
	@$(CC) -S $(CFLAGS) $< -c -o $@
%end

#------------------------------------------------------------------------------
%define gennames name=$(LIBNAME)
%end

#------------------------------------------------------------------------------
%define genlib flags=$(CFLAGS) cc=$(CC)
ifndef SLIB
SLIB := $(SLIBDIR)/$(LIBNAME).library
endif
ifndef LIB
LIB := $(LIBDIR)/lib$(LIBNAME).a
endif
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := endtag
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(OBJDIR)/$(END_FILE).o
endif
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
ifndef OBJS
OBJS := $(foreach f,$(FILES) $(FUNCTIONS) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)

$(SLIB) : $(LIB) $(DEPLIBS) $(EXTRA_DEPLIBS) $(OBJS) $(SYS_OBJS) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(GENMAP) $(LIBNAME)lib.map $(SYS_OBJS) $(EXTRA_LIBS) $(LIBS) $(ENDFUNC) -o $@ 2>&1|tee $(LIBNAME)lib.err
	@$(ECHO) "Checking $@..."
	@$(CHECKUDS) $@ > undefdsyms.list
	@$(IF) $(TEST) -s undefdsyms.list ; then \
	    $(CAT) undefdsyms.list >> $(@F)-x.err ; \
	    $(ECHO) "There are undefined symbols in $@:" ; \
	    $(CAT) undefdsyms.list ; \
	else $(NOP) ; fi
	@$(RM) undefdsyms.list
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.err; then $(RM) $(LIBNAME)lib.err ; else $(NOP) ; fi
	@$(STRIP) $@

# Collect all functions in a linklib for fast linking:
$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $?
	@$(RANLIB) $@

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

setup :
	@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(SLIBDIR) $(DESTDIRS) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h functable.c endtag.c $(EXTRA_CLEAN) \
	    $(LIB) $(SLIB)

$(OBJDIR)/%.o : %.c
%compile_q cmd=%(cc) opt=%(flags)

# Rule to create a .library in the local dir
libdefs.h : lib.conf $(BINDIR)/scripts/genlibdefs.awk
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genlibdefs.awk $< > $@

FUNCTABLE_SRCS := $(foreach f,$(FUNCTIONS),$(f).c)

functable.c : $(FUNCTABLE_SRCS) $(BINDIR)/scripts/genfunctable.awk \
	    libdefs.h
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genfunctable.awk $(FUNCTABLE_SRCS) > $@

endtag.c :
	@$(ECHO) "Generating $@..."
	@$(ECHO) "#include <libcore/libtail.c>" > $@

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
%mkdepend opt=$(MKDEPEND_FLAGS)
%end

#------------------------------------------------------------------------------
%define genromlib flags=$(CFLAGS) cc=$(CC)
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := endtag
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(OBJDIR)/$(END_FILE).o
endif
ifndef OSMODULE
OSMODULE := $(LIBNAME).library
endif
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
ifndef OBJS
OBJS := $(foreach f,$(FILES) $(FUNCTIONS) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)
ifndef DEPLIBS
DEPLIBS :=
endif
ifndef DEPS
DEPS := $(foreach f,$(INIT_FILE) $(FILES) $(FUNCTIONS) $(END_FILE),$(OBJDIR)/$(f).d)
endif
ALL_OBJS := $(SYS_OBJS) $(OBJS) $(ENDFUNC)

$(OSMODDIR)/$(OSMODULE) : $(LIB) $(INITFUNC) \
	    $(foreach f,$(DEPLIBS), $(LIBDIR)/lib$(f).a)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(GENMAP) $(OSMODULE).map -L$(LIBDIR) \
	    $(INITFUNC) $(LIB) $(foreach f, $(DEPLIBS), -l$(f)) \
	    -o $@ 2>&1 | tee $(OSMODULE).err
	@if $(TEST) ! -s $(OSMODULE).err; then rm $(OSMODULE).err ; else $(NOP); fi
ifeq ($(FLAVOUR),native)
	@strip $@
else
	@strip -x $@
endif

# Collect all functions in a linklib for fast linking
$(LIB) : $(ALL_OBJS)
	@$(ECHO) "Creating library $@..."
	@$(AR) $@ $(ALL_OBJS)
	@$(RANLIB) $@

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

setup :
	@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(OSMODDIR) $(DESTDIRS) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h functable.c endtag.c $(EXTRA_CLEAN) \
	    $(LIB) $(SLIB)

$(OBJDIR)/%.o : %.c
%compile_q cmd=%(cc) opt=%(flags)

# Rule to create a .library in the local dir
libdefs.h : lib.conf $(BINDIR)/scripts/genlibdefs.awk
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genlibdefs.awk $< > $@

ifndef FUNCTABLE_SRCS
FUNCTABLE_SRCS := $(foreach f,$(ALL_FUNCTIONS),$(f).c)
endif

functable.c : $(FUNCTABLE_SRCS) $(BINDIR)/scripts/genfunctable.awk \
	    libdefs.h
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genfunctable.awk $(FUNCTABLE_SRCS) > $@

$(END_FILE).c :
	@$(ECHO) "Generating $@..."
	@$(ECHO) "#include <libcore/libtail.c>" > $@

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
%mkdepend opt=$(MKDEPEND_FLAGS)
%end

#------------------------------------------------------------------------------
# version of genromlib that allows you to use archtools
%define genromlib_arch flags=$(CFLAGS) cc=$(CC) files=$(FILES) archive=$(ARCHIVE)
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := endtag
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(OBJDIR)/$(END_FILE).o
endif
ifndef OSMODULE
OSMODULE := $(LIBNAME).library
endif
ifndef NO_FUNCTABLE
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
else
SYS_FILES := $(SYS_FILES) $(INIT_FILE)
endif
ifndef OBJS
OBJS := $(foreach f,%(files) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)
ifndef DEPLIBS
DEPLIBS :=
endif
ifndef DEPS
DEPS := $(foreach f,$(INIT_FILE) functions $(FILES) $(END_FILE),$(OBJDIR)/$(f).d)
endif
ALL_OBJS := $(SYS_OBJS) $(OBJS) $(OBJDIR)/functions.o $(ENDFUNC)

$(OSMODDIR)/$(OSMODULE) : $(LIB) $(INITFUNC) \
	    $(foreach f,$(DEPLIBS), $(LIBDIR)/lib$(f).a)
	@$(ECHO) "Building $(notdir $@) ..."
	@%(cc) $(ILDFLAGS) $(GENMAP) $(OSMODULE).map -L$(LIBDIR) \
	    $(INITFUNC) $(LIB) $(foreach f, $(DEPLIBS), -l$(f)) \
	    -o $@ 2>&1 | tee $(OSMODULE).err
	@if $(TEST) ! -s $(OSMODULE).err; then rm $(OSMODULE).err ; else $(NOP); fi
ifeq ($(FLAVOUR),native)
	@strip $@
else
	@strip -x $@
endif

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

setup :
%mkdirs_q $(OBJDIR) $(LIBDIR) $(OSMODDIR) $(DESTDIRS)

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h $(OBJDIR)/functable.c endtag.c $(EXTRA_CLEAN) \
	    $(LIB) $(OSMODDIR)/$(OSMODULE)

# Collect all functions in a linklib for fast linking
$(LIB) : $(ALL_OBJS)
%mklib_arch from=$(ALL_OBJS) archive=%(archive)

$(OBJDIR)/%.o : %.c
%compile_q

# Rule to create a .library in the local dir
libdefs.h : lib.conf
	@$(ECHO) "Generating $@..."
	@$(ARCHTOOL) -c

ifndef NO_FUNCTABLE

functable.c : %(archive) libdefs.h
	@$(ECHO) "Generating $@..."
	@$(ARCHTOOL) -t %(archive)
endif

$(END_FILE).c :
	@$(ECHO) "Generating $@..."
	@$(ECHO) "#include <libcore/libtail.c>" > $@

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
%mkdepend_q opt=$(MKDEPEND_FLAGS)

# Generate include files
%genlibincludes_arch

%end

#------------------------------------------------------------------------------
# version of genromlib that allows you to use cpak
%define genromlib_f flags=$(CFLAGS) cc=$(CC) files=$(FILES) functions=$(FUNCTIONS)
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := endtag
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(OBJDIR)/$(END_FILE).o
endif
ifndef OSMODULE
OSMODULE := $(LIBNAME).library
endif
ifndef NO_FUNCTABLE
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
else
SYS_FILES := $(SYS_FILES) $(INIT_FILE)
endif
ifndef OBJS
OBJS := $(foreach f,%(files) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)
ifndef DEPLIBS
DEPLIBS :=
endif
ifndef DEPS
DEPS := $(foreach f,$(INIT_FILE) functions $(FILES) $(END_FILE),$(OBJDIR)/$(f).d)
endif
ALL_OBJS := $(SYS_OBJS) $(OBJS) $(OBJDIR)/functions.o $(ENDFUNC) 

$(OSMODDIR)/$(OSMODULE) : $(LIB) $(INITFUNC) \
	    $(foreach f,$(DEPLIBS), $(LIBDIR)/lib$(f).a)
	@$(ECHO) "Building $(notdir $@) ..."
	@%(cc) $(ILDFLAGS) $(GENMAP) $(OSMODULE).map -L$(LIBDIR) \
	    $(INITFUNC) $(LIB) $(foreach f, $(DEPLIBS), -l$(f)) \
	    -o $@ 2>&1 | tee $(OSMODULE).err
	@if $(TEST) ! -s $(OSMODULE).err; then rm $(OSMODULE).err ; else $(NOP); fi
ifeq ($(FLAVOUR),native)
	@strip $@
else
	@strip -x $@
endif

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

setup :
%mkdirs_q $(OBJDIR) $(LIBDIR) $(OSMODDIR) $(DESTDIRS)

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h functable.c endtag.c $(EXTRA_CLEAN) \
	    $(LIB) $(OSMODDIR)/$(OSMODULE)

# Collect all functions in a linklib for fast linking
$(LIB) : $(ALL_OBJS)
%mklib_f from=$(ALL_OBJS) functions=%(functions)

$(OBJDIR)/%.o : %.c
%compile_q

# Rule to create a .library in the local dir
libdefs.h : lib.conf $(BINDIR)/scripts/genlibdefs.awk
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genlibdefs.awk $< > $@

ifndef NO_FUNCTABLE
ifndef FUNCTABLE_SRCS
FUNCTABLE_SRCS := $(foreach f,$(ALL_FUNCTIONS),$(f).c)
endif

functable.c : $(FUNCTABLE_SRCS) $(BINDIR)/scripts/genfunctable.awk \
	    libdefs.h
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genfunctable.awk $(FUNCTABLE_SRCS) > $@
endif

$(END_FILE).c :
	@$(ECHO) "Generating $@..."
	@$(ECHO) "#include <libcore/libtail.c>" > $@

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
%mkdepend_q opt=$(MKDEPEND_FLAGS)

# Generate include files
%genlibincludes

%end

#------------------------------------------------------------------------------
# version of genromlib that allows you to use cpak and generates inline
%define genromlib_finline flags=$(CFLAGS) cc=$(CC) files=$(FILES) functions=$(FUNCTIONS)
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := endtag
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(OBJDIR)/$(END_FILE).o
endif
ifndef OSMODULE
OSMODULE := $(LIBNAME).library
endif
ifndef NO_FUNCTABLE
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
else
SYS_FILES := $(SYS_FILES) $(INIT_FILE)
endif
ifndef OBJS
OBJS := $(foreach f,%(files) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)
ifndef DEPLIBS
DEPLIBS :=
endif
ifndef DEPS
DEPS := $(foreach f,$(INIT_FILE) functions $(FILES) $(END_FILE),$(OBJDIR)/$(f).d)
endif
ALL_OBJS := $(SYS_OBJS) $(OBJS) $(OBJDIR)/functions.o $(ENDFUNC)

$(OSMODDIR)/$(OSMODULE) : $(LIB) $(INITFUNC) \
	    $(foreach f,$(DEPLIBS), $(LIBDIR)/lib$(f).a)
	@$(ECHO) "Building $(notdir $@) ..."
	@%(cc) $(ILDFLAGS) $(GENMAP) $(OSMODULE).map -L$(LIBDIR) \
	    $(INITFUNC) $(LIB) $(foreach f, $(DEPLIBS), -l$(f)) \
	    -o $@ 2>&1 | tee $(OSMODULE).err
	@if $(TEST) ! -s $(OSMODULE).err; then rm $(OSMODULE).err ; else $(NOP); fi
ifeq ($(FLAVOUR),native)
	@strip $@
else
	@strip -x $@
endif

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

setup :
%mkdirs_q $(OBJDIR) $(LIBDIR) $(OSMODDIR) $(DESTDIRS)

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h functable.c endtag.c $(EXTRA_CLEAN) \
	    $(LIB) $(OSMODDIR)/$(OSMODULE)

# Collect all functions in a linklib for fast linking
$(LIB) : $(ALL_OBJS)
%mklib_f from=$(ALL_OBJS) functions=%(functions)

$(OBJDIR)/%.o : %.c
%compile_q

# Rule to create a .library in the local dir
libdefs.h : lib.conf $(BINDIR)/scripts/genlibdefs.awk
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genlibdefs.awk $< > $@

ifndef NO_FUNCTABLE
ifndef FUNCTABLE_SRCS
FUNCTABLE_SRCS := $(foreach f,$(ALL_FUNCTIONS),$(f).c)
endif

functable.c : $(FUNCTABLE_SRCS) $(BINDIR)/scripts/genfunctable.awk \
	    libdefs.h
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genfunctable.awk $(FUNCTABLE_SRCS) > $@
endif

$(END_FILE).c :
	@$(ECHO) "Generating $@..."
	@$(ECHO) "#include <libcore/libtail.c>" > $@

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
%mkdepend_q opt=$(MKDEPEND_FLAGS)

# Generate include files
%genlibincludesinline

%end

#------------------------------------------------------------------------------
%define genlibincludes name=$(LIBNAME) functions=$(ALL_FUNCTIONS)
#MM includes-generate : setup-clib
includes-generate : setup libdefs.h $(OBJDIR)/headers.stamp \
			    $(INCDIR)/clib/%(name)_protos.h \
			    $(INCDIR)/defines/%(name).h
	@$(NOP)

FSRCS := $(foreach f,%(functions),$(f).c)

$(OBJDIR)/headers.stamp : $(FSRCS) $(SCRIPTDIR)/genshared \
	    $(SCRIPTDIR)/genclib.awk $(SCRIPTDIR)/gendefines.awk
	@$(SCRIPTDIR)/genshared -clib -prefix $(GENINCDIR) $(FSRCS)
	@$(SCRIPTDIR)/genshared -defines -prefix $(GENINCDIR) $(FSRCS)
	@$(TOUCH) $@

$(INCDIR)/clib/%(name)_protos.h : $(GENINCDIR)/clib/%(name)_protos.h
	$(CP) $< $@

$(INCDIR)/defines/%(name).h : $(GENINCDIR)/defines/%(name).h
	$(CP) $< $@
%end

#------------------------------------------------------------------------------
%define genlibincludes_arch name=$(LIBNAME) archive=$(ARCHIVE)
#MM includes-generate : setup-clib
includes-generate : setup libdefs.h $(OBJDIR)/headers.stamp \
			    $(INCDIR)/pragmas/%(name)_pragmas.h \
			    $(INCDIR)/clib/%(name)_protos.h \
			    $(INCDIR)/defines/%(name).h \
			    $(INCDIR)/inline/%(name).h \
			    $(INCDIR)/proto/%(name).h
	@$(NOP)

$(OBJDIR)/headers.stamp : %(archive)
	@$(ARCHTOOL) -I $(GENINCDIR) %(archive)
	@$(TOUCH) $@

$(INCDIR)/pragmas/%(name)_pragmas.h : $(GENINCDIR)/pragmas/%(name)_pragmas.h
	@$(CP) $< $@

$(INCDIR)/clib/%(name)_protos.h : $(GENINCDIR)/clib/%(name)_protos.h
	@$(CP) $< $@

$(INCDIR)/defines/%(name).h : $(GENINCDIR)/defines/%(name).h
	@$(CP) $< $@

$(INCDIR)/inline/%(name).h : $(GENINCDIR)/inline/%(name).h
	@$(CP) $< $@

$(INCDIR)/proto/%(name).h : $(GENINCDIR)/proto/%(name).h
	@$(CP) $< $@
%end



#------------------------------------------------------------------------------
%define genlibincludesinline name=$(LIBNAME) functions=$(ALL_FUNCTIONS)
#MM includes-generate : setup-clib
includes-generate : setup libdefs.h $(OBJDIR)/headers.stamp \
			    $(INCDIR)/clib/%(name)_protos.h \
			    $(INCDIR)/defines/%(name).h \
			    $(INCDIR)/inline/%(name).h \
			    $(INCDIR)/proto/%(name).h  
	@$(NOP)

FSRCS := $(foreach f,%(functions),$(f).c)

$(OBJDIR)/headers.stamp : $(FSRCS) $(SCRIPTDIR)/genshared \
	    $(SCRIPTDIR)/genclib.awk $(SCRIPTDIR)/gendefines.awk \
	    $(SCRIPTDIR)/geninline.awk
	@$(SCRIPTDIR)/genshared -proto -prefix $(GENINCDIR) $(FSRCS)
	@$(SCRIPTDIR)/genshared -clib -prefix $(GENINCDIR) $(FSRCS)
	@$(SCRIPTDIR)/genshared -defines -prefix $(GENINCDIR) $(FSRCS)
	@$(SCRIPTDIR)/genshared -inline -prefix $(GENINCDIR) $(FSRCS)
	@$(TOUCH) $@

$(INCDIR)/clib/%(name)_protos.h : $(GENINCDIR)/clib/%(name)_protos.h
	$(CP) $< $@

$(INCDIR)/defines/%(name).h : $(GENINCDIR)/defines/%(name).h
	$(CP) $< $@

$(INCDIR)/inline/%(name).h : $(GENINCDIR)/inline/%(name).h
	$(CP) $< $@

$(INCDIR)/proto/%(name).h : $(GENINCDIR)/proto/%(name).h
	$(CP) $< $@
%end

#------------------------------------------------------------------------------
# Used to help with the function replacement mechanism. Use like
#
#	%prepare_replace module=os/exec
#
# This will include the file contain information written out by the
# $(TOP)/config makefiles which is used to filter out files that are
# being replaced by machine dependant versions in the $(TOP)/config
# subtree.
#
# You can also determine which group of files you wish to filter against
# with the filter command. You pass it the variable to modify as var
#
# Eg:
#	%prepare_replace module=os/foobar
#	%filter_replace $(FUNCTIONS)
#
# The variable $(ADDITIONAL_OBJS) will be available for you to link in
# extra files.
#
# You should save the values of the variables which you filter in case
# you need them at a later date.
#
%define prepare_replace module=
-include $(GENDIR)/%(module)/mf.inc
%end

#------------------------------------------------------------------------------
%define filter_replace var=FILES filter=$(SUPPRESS_FILES)
%(var) := $(filter-out %(filter),$(%(var)))
%end

#------------------------------------------------------------------------------
# You can use this to prevent objects which weren't compiled correctly by
# config/$(...) directories to not be compiled by the local makefile.
%define additional_objs_rule
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) Error: One of the precompiled object files did not exist.
	@exit 1
%end

#------------------------------------------------------------------------------
%define add_objects files=/M
	@$(FOR) file in %(files) ; do \
	    $(ECHO) >> $(GENDIR)/config.files "add $$file" ; \
	done
%end

#------------------------------------------------------------------------------
%define exclude_files files=/M
	@$(FOR) file in %(files) ; do \
	    $(ECHO) >> $(GENDIR)/config.files "not $$file" ; \
	done
%end

#------------------------------------------------------------------------------
%define genlib_arch
SLIB	      := $(SLIBDIR)/$(LIBNAME).library
LIB	      := $(LIBDIR)/lib$(LIBNAME).a
INIT_FILE     := $(LIBNAME)_init
END_FILE      := $(LIBNAME)_endtag
OBJDIR        := $(GENDIR)/$(CURDIR)
INITFUNC      := $(OBJDIR)/$(INIT_FILE).o
ENDFUNC       := $(OBJDIR)/$(END_FILE).o
SYS_FILES     := $(SYS_FILES) $(INIT_FILE) functable
OBJS	      := $(foreach f,$(FILES) functions $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
SYS_OBJS      := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)

$(SLIB) : $(LIB) $(DEPLIBS) $(EXTRA_DEPLIBS) $(OBJS) $(SYS_OBJS) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(GENMAP) $(LIBNAME)lib.map $(SYS_OBJS) $(EXTRA_LIBS) $(LIBS) $(ENDFUNC) -o $@ 2>&1|tee $(LIBNAME)lib.err
	@$(ECHO) "Checking $@..."
	@$(CHECKUDS) $@ > undefdsyms.list
	@$(IF) $(TEST) -s undefdsyms.list ; then \
	    $(CAT) undefdsyms.list >> $(@F)-x.err ; \
	    $(ECHO) "There are undefined symbols in $@:" ; \
	    $(CAT) undefdsyms.list ; \
	else $(NOP) ; fi
	@$(RM) undefdsyms.list
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.err; then $(RM) $(LIBNAME)lib.err ; else $(NOP) ; fi
	@$(STRIP) $@

$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $(OBJS)
	@$(RANLIB) $@

$(OBJDIR)/functions.o : functions.c
%compile_q

functions.c : $(ARCHIVE)
	@$(ARCHTOOL) -s $(ARCHIVE) $@

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

ALL_FUNCTIONS := $(FUNCTIONS)
%genlibincludes_arch

$(OBJDIR)/%.o : %.c
%compile_q

functable.c : $(ARCHIVE) libdefs.h
	@$(ECHO) "Generating $@..."
	@$(ARCHTOOL) -t $(ARCHIVE)

$(END_FILE).c : $(TOP)/scripts/makeendtag.awk
	@$(ECHO) "Regenerating $@..."
	@$(AWK) -f $(TOP)/scripts/makeendtag.awk \
		-v lib=$(ULIBNAME)

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

libdefs.h : lib.conf
	@$(ECHO) "Generating $@..."
	@$(ARCHTOOL) -c

%end

#------------------------------------------------------------------------------
%define genlib_cpak
SLIB	      := $(SLIBDIR)/$(LIBNAME).library
LIB	      := $(LIBDIR)/lib$(LIBNAME).a
INIT_FILE     := $(LIBNAME)_init
END_FILE      := $(LIBNAME)_endtag
OBJDIR		      := $(GENDIR)/$(CURDIR)
INITFUNC      := $(OBJDIR)/$(INIT_FILE).o
ENDFUNC       := $(OBJDIR)/$(END_FILE).o
SYS_FILES     := $(SYS_FILES) $(INIT_FILE) functable
OBJS	      := $(foreach f,$(FILES) functions $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
SYS_OBJS      := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)

$(SLIB) : $(LIB) $(DEPLIBS) $(EXTRA_DEPLIBS) $(OBJS) $(SYS_OBJS) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(GENMAP) $(LIBNAME)lib.map $(SYS_OBJS) $(EXTRA_LIBS) $(LIBS) $(ENDFUNC) -o $@ 2>&1|tee $(LIBNAME)lib.err
	@$(ECHO) "Checking $@..."
	@$(CHECKUDS) $@ > undefdsyms.list
	@$(IF) $(TEST) -s undefdsyms.list ; then \
	    $(CAT) undefdsyms.list >> $(@F)-x.err ; \
	    $(ECHO) "There are undefined symbols in $@:" ; \
	    $(CAT) undefdsyms.list ; \
	else $(NOP) ; fi
	@$(RM) undefdsyms.list
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.err; then $(RM) $(LIBNAME)lib.err ; else $(NOP) ; fi
	@$(STRIP) $@

$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $(OBJS)
	@$(RANLIB) $@

$(OBJDIR)/functions.o : functions.c
%compile_q

functions.c : $(foreach f,$(FUNCTIONS),$(f).c)
	@$(CPAK) $(FUNCTIONS)

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

ALL_FUNCTIONS := $(FUNCTIONS)
%genlibincludes

$(OBJDIR)/%.o : %.c
%compile_q

FUNCTABLE_SRCS := $(foreach f,$(FUNCTIONS),$(f).c)

functable.c : $(FUNCTABLE_SRCS) $(BINDIR)/scripts/genfunctable.awk \
	libdefs.h
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genfunctable.awk $(FUNCTABLE_SRCS) > $@

$(END_FILE).c : $(TOP)/scripts/makeendtag.awk
	@$(ECHO) "Regenerating $@..."
	@$(AWK) -f $(TOP)/scripts/makeendtag.awk \
		-v lib=$(ULIBNAME)

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

libdefs.h : lib.conf $(BINDIR)/scripts/genlibdefs.awk
	@$(ECHO) "Generating $@..."
	@$(AWK) -f $(BINDIR)/scripts/genlibdefs.awk $< > $@

%end

#------------------------------------------------------------------------------
#Common template for generating non-rom shared objects
%define genwblib flags=$(CFLAGS) cc=$(CC)
ifndef LIBPOST
LIBPOST := library
endif
ifndef DESTDIR
DESTDIR	:= $(SLIBDIR)
endif
ifndef SLIB
SLIB := $(DESTDIR)/$(LIBNAME).$(LIBPOST)
endif
ifndef LIB
LIB := $(LIBDIR)/lib$(LIBNAME).a
endif
ifndef INIT_FILE
INIT_FILE := $(LIBNAME)_init
endif
ifndef END_FILE
END_FILE := $(LIBNAME)_end
endif
ifndef OBJDIR
OBJDIR := $(GENDIR)/$(CURDIR)
endif
ifndef INITFUNC
INITFUNC := $(OBJDIR)/$(INIT_FILE).o
endif
ifndef ENDFUNC
ENDFUNC := $(OBJDIR)/$(END_FILE).o
endif
SYS_FILES := $(SYS_FILES) $(INIT_FILE) functable
ifndef OBJS
OBJS := $(foreach f,$(FILES) $(FUNCTIONS) $(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o)
endif
SYS_OBJS := $(foreach f,$(SYS_FILES),$(OBJDIR)/$(f).o)
ifndef DEPS
DEPS := $(foreach f, $(INIT_FILE) $(FILES) $(END_FILE), $(OBJDIR)/$(f).d)
endif

DESTDIRS := $(DESTDIRS) $(DESTDIR)

# Insert collection lib lib$(LIBNAME).a into $(LIBS) for final $(SLIB) target
%define_libs prelibs=-l$(LIBNAME)

$(SLIB) : $(LIB) $(DEPLIBS) $(EXTRA_DEPLIBS) $(OBJS) $(SYS_OBJS) $(ENDFUNC)
	@$(ECHO) "Building $(notdir $@) ..."
	@$(CC) $(ILDFLAGS) $(GENMAP) $(LIBNAME)lib.map $(SYS_OBJS) $(LIBS) $(ENDFUNC) $(EXTRA_LIBS) -o $@ 2>&1|tee $(LIBNAME)lib.err
	@$(ECHO) "Checking $@..."
	@$(CHECKUDS) $@ > undefdsyms.list
	@$(IF) $(TEST) -s undefdsyms.list ; then \
	    $(CAT) undefdsyms.list >> $(@F)-x.err ; \
	    $(ECHO) "There are undefined symbols in $@:" ; \
	    $(CAT) undefdsyms.list ; \
	else $(NOP) ; fi
	@$(RM) undefdsyms.list
	@$(IF) $(TEST) ! -s $(LIBNAME)lib.err; then $(RM) $(LIBNAME)lib.err ; else $(NOP) ; fi
	@$(STRIP) $@

# Collect all functions in a linklib for fast linking:
$(LIB) : $(OBJS)
	@$(ECHO) "Adding functions to $(notdir $@) ..."
	@$(AR) $@ $?
	@$(RANLIB) $@

show-flags :
	@$(ECHO) "CFLAGS=$(CFLAGS)"

setup :
	@$(FOR) dir in $(OBJDIR) $(LIBDIR) $(SLIBDIR) $(DESTDIRS) ; do \
	    $(IF) $(TEST) ! -d $$dir ; then $(MKDIR) $$dir ; else $(NOP) ; fi ; \
	done

clean ::
	$(RM) $(OBJDIR) *.err libdefs.h functable.c $(END_FILE) $(EXTRA_CLEAN) \
	    $(LIB) $(SLIB)

$(OBJDIR)/%.o : %.c
%compile_q cmd=%(cc) opt=%(flags)

# Rule to create a .library in the local dir
libdefs.h : lib.conf $(ARCHTOOL)
	@$(ECHO) "Generating $@..."
	@$(ARCHTOOL) -c

FUNCTABLE_SRCS := $(foreach f,$(FUNCTIONS),$(f).c)

functable.c : $(FUNCTABLE_SRCS) $(ARCHTOOL) libdefs.h
	@$(ECHO) "Generating $@..."
	@$(ARCHTOOL) -t

$(END_FILE).c :
	@$(ECHO) "Generating $@..."
	@$(ECHO) "#include <libcore/libtail.c>" > $@

$(OBJDIR)/$(LIBNAME)_init.o : libdefs.h

ifneq (,$(ADDITIONAL_OBJS))
$(foreach f,$(ADDITIONAL_OBJS),$(OBJDIR)/$(f).o) :
	@$(ECHO) "Error: The precompiled object $@ did not exist."
	@exit 1
endif

$(OBJDIR)/%.d : %.c
	%mkdepend_q opt=$(MKDEPEND_FLAGS)

%include_deps
%end
